generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs"
}

generator erd {
  provider = "node node_modules/prisma-erd-generator"
  output   = "../docs/ERD.svg"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id Int @id @default(autoincrement())

  parentId Int?
  parent   Category?  @relation("CatSubCat", fields: [parentId], references: [id])
  children Category[] @relation("CatSubCat")

  name   String @db.VarChar(500)
  status Status @default(PENDING)

  // to adhere to the naming in the spec, image field has no id suffix
  image         Int           @unique
  categoryImage CategoryImage @relation(fields: [image], references: [id], onDelete: Cascade)

  Product Product[]

  @@index([parentId], map: "Category_parentId_fkey")
}

model CategoryImage {
  id           Int    @id @default(autoincrement())
  destination  String @db.VarChar(255)
  originalname String @db.VarChar(50)
  filename     String @db.VarChar(100)
  mimetype     String @db.VarChar(20)

  category Category?
}

model Product {
  id Int @id @default(autoincrement())

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  parentId Int?
  parent   Product?  @relation("ProdSubProd", fields: [parentId], references: [id])
  children Product[] @relation("ProdSubProd")

  name String @db.VarChar(1000)

  description String @db.VarChar(10000)

  highlights Highlight[]

  images ProductImage[]

  status Status @default(PENDING)

  @@index([categoryId], map: "Product_categoryId_fkey")
  @@index([parentId], map: "Product_parentId_fkey")
}

model ProductImage {
  id           Int    @id @default(autoincrement())
  destination  String @db.VarChar(255)
  originalname String @db.VarChar(50)
  filename     String @db.VarChar(100)
  mimetype     String @db.VarChar(20)
  url          String? @db.VarChar(100)

  productId Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ProductImage_productId_fkey")
}

model Highlight {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(2000)
  productId   Int
  Product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Highlight_productId_fkey")
}

enum Status {
  PENDING
  ACTIVE
  DELETE
}
